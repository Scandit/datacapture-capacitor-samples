platform :ios, '14.0'
use_frameworks!

post_install do |installer|
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      config.build_settings['EXPANDED_CODE_SIGN_IDENTITY'] = ""
      config.build_settings['CODE_SIGNING_REQUIRED'] = "NO"
      config.build_settings['CODE_SIGNING_ALLOWED'] = "NO"
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '14.0'
      config.build_settings['ENABLE_BITCODE'] = 'NO'
    end
  end
end

# workaround to avoid Xcode caching of Pods that requires
# Product -> Clean Build Folder after new Cordova plugins installed
# Requires CocoaPods 1.6 or newer
install! 'cocoapods', :disable_input_output_paths => true

def capacitor_pods
  pod 'Capacitor', :path => '../../node_modules/@capacitor/ios'
  pod 'CapacitorCordova', :path => '../../node_modules/@capacitor/ios'
  pod 'ScanditCapacitorDatacaptureBarcode', :path => '../../node_modules/scandit-capacitor-datacapture-barcode'
  pod 'ScanditCapacitorDatacaptureCore', :path => '../../node_modules/scandit-capacitor-datacapture-core'
end

def find_core_plugin(start_path)
  current_path = File.expand_path(start_path)
  until current_path == "/"
    folder_path = File.join(current_path, 'scandit-capacitor-datacapture-core')
    if Dir.exist?(folder_path)
      return folder_path
    end
    current_path = File.dirname(current_path)
  end
  nil
end

scandit_core_path = find_core_plugin(__dir__)
if scandit_core_path
  require_relative File.join(scandit_core_path, 'scripts/detect_frameworks')
end

target 'App' do
  capacitor_pods
  # Add your Pods here
end
